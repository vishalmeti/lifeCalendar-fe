
import { useState } from 'react';
import { BookOpen, Calendar, Sparkles, Eye, Trash2 } from 'lucide-react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Textarea } from './ui/textarea';
import { Badge } from './ui/badge';

interface Story {
  id: string;
  title: string;
  content: string;
  dateRange: string;
  prompt: string;
  createdAt: string;
  wordCount: number;
}

const Storybook = () => {
  const [stories, setStories] = useState<Story[]>([
    {
      id: '1',
      title: 'A Week of Growth',
      content: `This past week has been a remarkable journey of professional and personal development. Starting with Monday's team standup and client presentation, you demonstrated strong leadership and communication skills that set the tone for productive days ahead.

Your dedication to completing the project proposal while maintaining high standards shows your commitment to excellence. The balance between structured meetings and focused individual work created a rhythm that brought out your best performance.

The notes you wrote about feeling motivated about the upcoming project launch reveal someone who finds energy in meaningful challenges. This intrinsic motivation, combined with your systematic approach to task management, suggests you're entering a phase of significant professional growth.

What stands out most is your ability to maintain a positive, productive mindset even when managing multiple responsibilities. This emotional intelligence and resilience are valuable assets that will serve you well in future endeavors.`,
      dateRange: 'May 19 - May 25, 2024',
      prompt: 'Create a reflective narrative about my productivity and growth patterns this week',
      createdAt: '2024-05-25',
      wordCount: 156
    }
  ]);

  const [selectedPeriod, setSelectedPeriod] = useState('');
  const [customPrompt, setCustomPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [expandedStory, setExpandedStory] = useState<string | null>(null);

  const timePeriods = [
    { value: 'last-week', label: 'Last Week' },
    { value: 'last-month', label: 'Last Month' },
    { value: 'last-quarter', label: 'Last Quarter' },
    { value: 'last-year', label: 'Last Year' },
    { value: 'custom', label: 'Custom Range' }
  ];

  const handleGenerateStory = () => {
    if (!selectedPeriod || !customPrompt.trim()) return;

    setIsGenerating(true);
    
    // Simulate AI generation
    setTimeout(() => {
      const newStory: Story = {
        id: Date.now().toString(),
        title: `${customPrompt.slice(0, 50)}...`,
        content: `This is a sample AI-generated story based on your prompt: "${customPrompt}". The AI has analyzed your entries from the selected time period and created this narrative reflection. In a real implementation, this would be generated by your backend AI service using your actual data and the specific time range you selected.

The story would weave together themes from your daily entries, identify patterns in your mood and activities, and provide meaningful insights about your journey during this period. The AI would craft a personalized narrative that helps you reflect on your growth, challenges, and achievements.`,
        dateRange: getDateRangeLabel(selectedPeriod),
        prompt: customPrompt,
        createdAt: new Date().toISOString().split('T')[0],
        wordCount: 120
      };

      setStories([newStory, ...stories]);
      setSelectedPeriod('');
      setCustomPrompt('');
      setIsGenerating(false);
    }, 2000);
  };

  const getDateRangeLabel = (period: string) => {
    const now = new Date();
    switch (period) {
      case 'last-week': {
        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        return `${weekAgo.toLocaleDateString()} - ${now.toLocaleDateString()}`;
      }
      case 'last-month': {
        const monthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
        return `${monthAgo.toLocaleDateString()} - ${now.toLocaleDateString()}`;
      }
      default:
        return 'Custom Range';
    }
  };

  const deleteStory = (storyId: string) => {
    setStories(stories.filter(story => story.id !== storyId));
  };

  const toggleStoryExpansion = (storyId: string) => {
    setExpandedStory(expandedStory === storyId ? null : storyId);
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Storybook</h1>
        <p className="text-gray-600">Let AI craft meaningful narratives from your life entries</p>
      </div>

      {/* Story Generation Form */}
      <Card className="mb-8 border-l-4 border-l-purple-500">
        <CardHeader>
          <CardTitle className="flex items-center text-purple-700">
            <Sparkles className="w-5 h-5 mr-2" />
            Generate New Story
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Time Period
            </label>
            <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>
              <SelectTrigger>
                <SelectValue placeholder="Select a time period" />
              </SelectTrigger>
              <SelectContent>
                {timePeriods.map((period) => (
                  <SelectItem key={period.value} value={period.value}>
                    {period.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Story Prompt
            </label>
            <Textarea
              placeholder="Describe what kind of story or reflection you'd like AI to create. For example: 'Create a narrative about my professional growth' or 'Reflect on my emotional journey and key moments'"
              value={customPrompt}
              onChange={(e) => setCustomPrompt(e.target.value)}
              rows={3}
            />
          </div>

          <Button
            onClick={handleGenerateStory}
            disabled={!selectedPeriod || !customPrompt.trim() || isGenerating}
            className="bg-purple-600 hover:bg-purple-700 text-white"
          >
            {isGenerating ? (
              <>
                <Sparkles className="w-4 h-4 mr-2 animate-spin" />
                Generating Story...
              </>
            ) : (
              <>
                <Sparkles className="w-4 h-4 mr-2" />
                Generate Story
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Stories List */}
      <div className="space-y-6">
        {stories.map((story) => (
          <Card key={story.id} className="hover:shadow-lg transition-shadow">
            <CardHeader>
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <CardTitle className="text-xl text-gray-900 mb-2">
                    {story.title}
                  </CardTitle>
                  <div className="flex items-center space-x-4 text-sm text-gray-500">
                    <div className="flex items-center">
                      <Calendar className="w-4 h-4 mr-1" />
                      {story.dateRange}
                    </div>
                    <Badge variant="secondary">
                      {story.wordCount} words
                    </Badge>
                    <span>Created {new Date(story.createdAt).toLocaleDateString()}</span>
                  </div>
                </div>
                <div className="flex space-x-2 ml-4">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => toggleStoryExpansion(story.id)}
                  >
                    <Eye className="w-4 h-4 mr-1" />
                    {expandedStory === story.id ? 'Collapse' : 'Read'}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => deleteStory(story.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            {expandedStory === story.id && (
              <CardContent className="pt-0">
                <div className="bg-gray-50 p-4 rounded-lg mb-4">
                  <h4 className="font-medium text-gray-700 mb-2">Original Prompt:</h4>
                  <p className="text-gray-600 italic">"{story.prompt}"</p>
                </div>
                
                <div className="prose max-w-none">
                  <div className="bg-white p-6 rounded-lg border-l-4 border-l-purple-400">
                    {story.content.split('\n\n').map((paragraph, index) => (
                      <p key={index} className="mb-4 text-gray-700 leading-relaxed last:mb-0">
                        {paragraph}
                      </p>
                    ))}
                  </div>
                </div>
              </CardContent>
            )}
          </Card>
        ))}

        {stories.length === 0 && (
          <div className="text-center py-12">
            <BookOpen className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No stories yet</h3>
            <p className="text-gray-500 mb-4">
              Generate your first AI-powered narrative from your life entries
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Storybook;
